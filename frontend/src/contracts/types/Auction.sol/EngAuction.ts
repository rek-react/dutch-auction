/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace EngAuction {
  export type PrizeStruct = { nftAddress: AddressLike; tokenId: BigNumberish };

  export type PrizeStructOutput = [nftAddress: string, tokenId: bigint] & {
    nftAddress: string;
    tokenId: bigint;
  };

  export type AuctionStruct = {
    seller: AddressLike;
    startPrice: BigNumberish;
    finalPrice: BigNumberish;
    startAt: BigNumberish;
    endAt: BigNumberish;
    discountRate: BigNumberish;
    duration: BigNumberish;
    prize: EngAuction.PrizeStruct;
    stopped: boolean;
  };

  export type AuctionStructOutput = [
    seller: string,
    startPrice: bigint,
    finalPrice: bigint,
    startAt: bigint,
    endAt: bigint,
    discountRate: bigint,
    duration: bigint,
    prize: EngAuction.PrizeStructOutput,
    stopped: boolean
  ] & {
    seller: string;
    startPrice: bigint;
    finalPrice: bigint;
    startAt: bigint;
    endAt: bigint;
    discountRate: bigint;
    duration: bigint;
    prize: EngAuction.PrizeStructOutput;
    stopped: boolean;
  };
}

export interface EngAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctions"
      | "buy"
      | "createAuction"
      | "getAuctionPrice"
      | "getAuctions"
      | "owner"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuctionCreated" | "AuctionEnded" | "Refund"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    index: BigNumberish,
    prize: EngAuction.PrizeStruct,
    startPrice: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    index: bigint,
    prize: EngAuction.PrizeStructOutput,
    startPrice: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    index: bigint;
    prize: EngAuction.PrizeStructOutput;
    startPrice: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [
    index: BigNumberish,
    finalPrice: BigNumberish,
    buyer: AddressLike
  ];
  export type OutputTuple = [index: bigint, finalPrice: bigint, buyer: string];
  export interface OutputObject {
    index: bigint;
    finalPrice: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    index: BigNumberish,
    buyer: AddressLike,
    refund: BigNumberish
  ];
  export type OutputTuple = [index: bigint, buyer: string, refund: bigint];
  export interface OutputObject {
    index: bigint;
    buyer: string;
    refund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EngAuction extends BaseContract {
  connect(runner?: ContractRunner | null): EngAuction;
  waitForDeployment(): Promise<this>;

  interface: EngAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        EngAuction.PrizeStructOutput,
        boolean
      ] & {
        seller: string;
        startPrice: bigint;
        finalPrice: bigint;
        startAt: bigint;
        endAt: bigint;
        discountRate: bigint;
        duration: bigint;
        prize: EngAuction.PrizeStructOutput;
        stopped: boolean;
      }
    ],
    "view"
  >;

  buy: TypedContractMethod<[_index: BigNumberish], [void], "payable">;

  createAuction: TypedContractMethod<
    [
      _startPrice: BigNumberish,
      _nftAddress: AddressLike,
      _tokenId: BigNumberish,
      _duration: BigNumberish,
      _discountRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAuctionPrice: TypedContractMethod<
    [_index: BigNumberish],
    [bigint],
    "view"
  >;

  getAuctions: TypedContractMethod<
    [],
    [EngAuction.AuctionStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        EngAuction.PrizeStructOutput,
        boolean
      ] & {
        seller: string;
        startPrice: bigint;
        finalPrice: bigint;
        startAt: bigint;
        endAt: bigint;
        discountRate: bigint;
        duration: bigint;
        prize: EngAuction.PrizeStructOutput;
        stopped: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[_index: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _startPrice: BigNumberish,
      _nftAddress: AddressLike,
      _tokenId: BigNumberish,
      _duration: BigNumberish,
      _discountRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAuctionPrice"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuctions"
  ): TypedContractMethod<[], [EngAuction.AuctionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,tuple,uint256,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "AuctionEnded(uint256,uint256,address)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "Refund(uint256,address,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
  };
}
